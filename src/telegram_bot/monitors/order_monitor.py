import logging
from typing import Dict
from .base_monitor import BaseMonitor
from exchange.websocket_client import BybitWebsocketClient
from ..formatters.monitor_formatter import MonitorFormatter
import time

logger = logging.getLogger(__name__)

class OrderMonitor(BaseMonitor):
    """Ï£ºÎ¨∏/Ìè¨ÏßÄÏÖò Î™®ÎãàÌÑ∞ÎßÅ"""
    
    def __init__(self, bot, bybit_client):
        super().__init__(bot, bybit_client)
        # Use the existing WebSocket client from bybit_client instead of creating a new one
        self.ws_client = bybit_client.ws_client
        self.monitor_formatter = MonitorFormatter()
        # Ï≤¥Í≤∞ ÏïåÎ¶º ÎàÑÏ†ÅÏùÑ ÏúÑÌïú Î≥ÄÏàòÎì§
        self._execution_buffer = {}  # orderIdÎ≥Ñ Ï≤¥Í≤∞ Ï†ïÎ≥¥ ÎàÑÏ†Å
        self._last_notification = {}  # orderIdÎ≥Ñ ÎßàÏßÄÎßâ ÏïåÎ¶º ÏãúÍ∞Ñ
        self._notification_interval = 5  # ÏµúÏÜå ÏïåÎ¶º Í∞ÑÍ≤© (Ï¥à)

    async def start(self):
        """Î™®ÎãàÌÑ∞ÎßÅ ÏãúÏûë"""
        # ÏΩúÎ∞± Îì±Î°ù
        self.ws_client.add_callback('order', self._handle_order_update)
        self.ws_client.add_callback('position', self._handle_position_update)
        self.ws_client.add_callback('execution', self._handle_execution_update)
        
        # Î™®ÎãàÌÑ∞ÎßÅ ÏãúÏûë
        await self.ws_client.start_monitoring()

    async def _handle_order_update(self, data: Dict):
        """Ï£ºÎ¨∏ ÏóÖÎç∞Ïù¥Ìä∏ Ï≤òÎ¶¨"""
        try:
            # Îç∞Ïù¥ÌÑ∞Í∞Ä Î¶¨Ïä§Ìä∏Ïù∏ Í≤ΩÏö∞ Í∞Å Ìï≠Î™© Ï≤òÎ¶¨
            if isinstance(data, list):
                for item in data:
                    await self._process_order_data(item)
            else:
                await self._process_order_data(data)
                
        except Exception as e:
            logger.error(f"Ï£ºÎ¨∏ ÏóÖÎç∞Ïù¥Ìä∏ Ï≤òÎ¶¨ Ï§ë Ïò§Î•ò: {str(e)}")

    async def _process_order_data(self, data: Dict):
        """Í∞úÎ≥Ñ Ï£ºÎ¨∏ Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨"""
        try:
            order_data = data.get('data', {})
            if not order_data:
                return

            # Ï£ºÎ¨∏ ÏÉÅÌÉúÏóê Îî∞Î•∏ Î©îÏãúÏßÄ ÏÉùÏÑ±
            status = order_data.get('orderStatus')
            if status == 'Created':
                message = self.monitor_formatter.format_order_created(order_data)
            elif status == 'Filled':
                message = self.monitor_formatter.format_order_filled(order_data)
            elif status == 'Cancelled':
                message = self.monitor_formatter.format_order_cancelled(order_data)
            else:
                return

            # ÌÖîÎ†àÍ∑∏Îû®ÏúºÎ°ú ÏïåÎ¶º Ï†ÑÏÜ°
            if message:
                await self.bot.send_order_notification(message)
                
        except Exception as e:
            logger.error(f"Ï£ºÎ¨∏ Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨ Ï§ë Ïò§Î•ò: {str(e)}")

    async def _handle_position_update(self, data: Dict):
        """Ìè¨ÏßÄÏÖò ÏóÖÎç∞Ïù¥Ìä∏ Ï≤òÎ¶¨"""
        try:
            # Îç∞Ïù¥ÌÑ∞Í∞Ä Î¶¨Ïä§Ìä∏Ïù∏ Í≤ΩÏö∞ Í∞Å Ìï≠Î™© Ï≤òÎ¶¨
            if isinstance(data, list):
                for item in data:
                    await self._process_position_data(item)
            else:
                await self._process_position_data(data)
                
        except Exception as e:
            logger.error(f"Ìè¨ÏßÄÏÖò ÏóÖÎç∞Ïù¥Ìä∏ Ï≤òÎ¶¨ Ï§ë Ïò§Î•ò: {str(e)}")

    async def _process_position_data(self, data: Dict):
        """Í∞úÎ≥Ñ Ìè¨ÏßÄÏÖò Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨"""
        try:
            position_data = data.get('data', {})
            if not position_data:
                return

            # Ìè¨ÏßÄÏÖò Î©îÏãúÏßÄ ÏÉùÏÑ±
            message = self.monitor_formatter.format_position_update(position_data)
            
            # ÌÖîÎ†àÍ∑∏Îû®ÏúºÎ°ú ÏïåÎ¶º Ï†ÑÏÜ°
            if message:
                await self.bot.send_position_notification(message)
                
        except Exception as e:
            logger.error(f"Ìè¨ÏßÄÏÖò Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨ Ï§ë Ïò§Î•ò: {str(e)}")

    async def _handle_execution_update(self, data: Dict):
        """Ï≤¥Í≤∞ ÏóÖÎç∞Ïù¥Ìä∏ Ï≤òÎ¶¨"""
        try:
            # Îç∞Ïù¥ÌÑ∞Í∞Ä Î¶¨Ïä§Ìä∏Ïù∏ Í≤ΩÏö∞ Í∞Å Ìï≠Î™© Ï≤òÎ¶¨
            if isinstance(data, list):
                for item in data:
                    await self._process_execution_data(item)
            else:
                await self._process_execution_data(data)
                
        except Exception as e:
            logger.error(f"Ï≤¥Í≤∞ ÏóÖÎç∞Ïù¥Ìä∏ Ï≤òÎ¶¨ Ï§ë Ïò§Î•ò: {str(e)}")

    async def _process_execution_data(self, data: Dict):
        """Í∞úÎ≥Ñ Ï≤¥Í≤∞ Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨"""
        try:
            execution_data = data.get('data', {})
            if not execution_data:
                return

            order_id = execution_data.get('orderId')
            if not order_id:
                return

            current_time = time.time()
            
            # ÏÉàÎ°úÏö¥ Ï£ºÎ¨∏Ïù¥Î©¥ Î≤ÑÌçº Ï¥àÍ∏∞Ìôî
            if order_id not in self._execution_buffer:
                self._execution_buffer[order_id] = {
                    'symbol': execution_data.get('symbol'),
                    'side': execution_data.get('side'),
                    'total_qty': 0,
                    'avg_price': 0,
                    'executions': []
                }

            # Ï≤¥Í≤∞ Ï†ïÎ≥¥ ÎàÑÏ†Å
            exec_qty = float(execution_data.get('execQty', 0))
            exec_price = float(execution_data.get('execPrice', 0))
            
            buffer = self._execution_buffer[order_id]
            buffer['executions'].append({
                'qty': exec_qty,
                'price': exec_price,
                'time': current_time
            })
            
            # ÌèâÍ∑† Í∞ÄÍ≤©Í≥º Ï¥ù ÏàòÎüâ Í≥ÑÏÇ∞
            total_value = 0
            total_qty = 0
            for exec in buffer['executions']:
                total_value += exec['qty'] * exec['price']
                total_qty += exec['qty']
            
            buffer['total_qty'] = total_qty
            buffer['avg_price'] = total_value / total_qty if total_qty > 0 else 0

            # ÏïåÎ¶º Ï†ÑÏÜ° Ïó¨Î∂Ä Í≤∞Ï†ï
            last_notification = self._last_notification.get(order_id, 0)
            should_notify = (
                current_time - last_notification >= self._notification_interval or  # ÏùºÏ†ï ÏãúÍ∞ÑÏù¥ ÏßÄÎÇ¨Í±∞ÎÇò
                len(buffer['executions']) == 1 or  # Ï≤´ Ï≤¥Í≤∞Ïù¥Í±∞ÎÇò
                buffer['total_qty'] >= float(execution_data.get('orderQty', 0))  # Ï£ºÎ¨∏Ïù¥ ÏôÑÏ†ÑÌûà Ï≤¥Í≤∞ÎêêÏùÑ Îïå
            )

            if should_notify:
                # ÎàÑÏ†ÅÎêú Ï≤¥Í≤∞ Ï†ïÎ≥¥Î°ú Î©îÏãúÏßÄ ÏÉùÏÑ±
                message = (
                    f"üí´ Ï≤¥Í≤∞ ÏïåÎ¶º (ÎàÑÏ†Å)\n"
                    f"Ïã¨Î≥º: {buffer['symbol']}\n"
                    f"Î∞©Ìñ•: {buffer['side']}\n"
                    f"Ï≤¥Í≤∞ ÏàòÎüâ: {buffer['total_qty']:.3f}\n"
                    f"ÌèâÍ∑† Í∞ÄÍ≤©: {buffer['avg_price']:.1f}"
                )
                
                await self.bot.send_message_to_all(message, self.bot.MSG_TYPE_EXECUTION)
                self._last_notification[order_id] = current_time
                
                # ÏôÑÏ†Ñ Ï≤¥Í≤∞Îêú Í≤ΩÏö∞ Î≤ÑÌçº Ï†ïÎ¶¨
                if buffer['total_qty'] >= float(execution_data.get('orderQty', 0)):
                    del self._execution_buffer[order_id]
                    del self._last_notification[order_id]

        except Exception as e:
            logger.error(f"Ï≤¥Í≤∞ Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨ Ï§ë Ïò§Î•ò: {str(e)}")
